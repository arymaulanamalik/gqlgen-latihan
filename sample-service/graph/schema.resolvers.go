package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"errors"

	"github.com/arymaulanamalik/gqlgen-latihan/sample-service/graph/model"
	gqlutils "github.com/arymaulanamalik/gqlgen-latihan/sample-service/utils/graphql"
)

// CartList is the resolver for the cartList field.
func (r *queryResolver) CartList(ctx context.Context) (*model.Cart, error) {
	reqHeader := gqlutils.GetReqHeader(ctx)
	userID := reqHeader.Get("x-user-id")
	if len(userID) == 0 {
		return nil, errors.New("user id not found")
	}

	cart, err := r.CartService.GetCartByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	result := []*model.CartItem{}

	for _, v := range cart.Items {
		result = append(result, &model.CartItem{
			Qty:   v.Qty,
			Notes: v.Notes,
			Product: &model.Product{
				ID:   v.Product.ID,
				Name: v.Product.Name,
			},
		})
	}

	return &model.Cart{
		Items: result,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
